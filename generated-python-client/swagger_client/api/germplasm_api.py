# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.8-rdg
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GermplasmApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_germplasm(self, authorization, **kwargs):  # noqa: E501
        """Add a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_germplasm(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmCreationDTO body: Germplasm description
        :param bool check_only: Checking only
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_germplasm_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.create_germplasm_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def create_germplasm_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Add a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_germplasm_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmCreationDTO body: Germplasm description
        :param bool check_only: Checking only
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body', 'check_only', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_germplasm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `create_germplasm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'check_only' in params:
            query_params.append(('checkOnly', params['check_only']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_germplasm_group(self, authorization, **kwargs):  # noqa: E501
        """Add a germplasm group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_germplasm_group(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmGroupCreationDTO body: Germplasm group description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_germplasm_group_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.create_germplasm_group_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def create_germplasm_group_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Add a germplasm group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_germplasm_group_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmGroupCreationDTO body: Germplasm group description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_germplasm_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `create_germplasm_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm_group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_germplasm(self, uri, authorization, **kwargs):  # noqa: E501
        """Delete a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_germplasm(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_germplasm_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_germplasm_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def delete_germplasm_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Delete a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_germplasm_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_germplasm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if self.api_client.client_side_validation and ('uri' not in params or
                                                       params['uri'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uri` when calling `delete_germplasm`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `delete_germplasm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/{uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_germplasm_group(self, uri, authorization, **kwargs):  # noqa: E501
        """Delete a germplasm group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_germplasm_group(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm group URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_germplasm_group_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_germplasm_group_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def delete_germplasm_group_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Delete a germplasm group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_germplasm_group_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm group URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: ObjectUriResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_germplasm_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if self.api_client.client_side_validation and ('uri' not in params or
                                                       params['uri'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uri` when calling `delete_germplasm_group`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `delete_germplasm_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm_group/{uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ObjectUriResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_germplasm(self, authorization, **kwargs):  # noqa: E501
        """export germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_germplasm(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmSearchFilter body: CSV export configuration
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_germplasm_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.export_germplasm_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def export_germplasm_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """export germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_germplasm_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmSearchFilter body: CSV export configuration
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_germplasm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `export_germplasm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/export', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasm(self, uri, authorization, **kwargs):  # noqa: E501
        """Get a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: GermplasmGetSingleDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_germplasm_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def get_germplasm_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Get a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: GermplasmGetSingleDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if self.api_client.client_side_validation and ('uri' not in params or
                                                       params['uri'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uri` when calling `get_germplasm`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_germplasm`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/{uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GermplasmGetSingleDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasm_attribute_values(self, attribute, authorization, **kwargs):  # noqa: E501
        """Get attribute values of all germplasm for a given attribute  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_attribute_values(attribute, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute: (required)
        :param str authorization: Authentication token (required)
        :param str attribute_value: Regex pattern for filtering attribute value
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_germplasm_attribute_values_with_http_info(attribute, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_attribute_values_with_http_info(attribute, authorization, **kwargs)  # noqa: E501
            return data

    def get_germplasm_attribute_values_with_http_info(self, attribute, authorization, **kwargs):  # noqa: E501
        """Get attribute values of all germplasm for a given attribute  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_attribute_values_with_http_info(attribute, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute: (required)
        :param str authorization: Authentication token (required)
        :param str attribute_value: Regex pattern for filtering attribute value
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute', 'authorization', 'attribute_value', 'page', 'page_size', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_attribute_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attribute' is set
        if self.api_client.client_side_validation and ('attribute' not in params or
                                                       params['attribute'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attribute` when calling `get_germplasm_attribute_values`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_germplasm_attribute_values`")  # noqa: E501

        if self.api_client.client_side_validation and ('page' in params and params['page'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_germplasm_attribute_values`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_germplasm_attribute_values`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'attribute' in params:
            path_params['attribute'] = params['attribute']  # noqa: E501

        query_params = []
        if 'attribute_value' in params:
            query_params.append(('attribute_value', params['attribute_value']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/attributes/{attribute}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasm_attributes(self, authorization, **kwargs):  # noqa: E501
        """Get attributes of all germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_attributes(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_germplasm_attributes_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_attributes_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def get_germplasm_attributes_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Get attributes of all germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_attributes_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_germplasm_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasm_experiments(self, uri, authorization, **kwargs):  # noqa: E501
        """Get experiments where a germplasm has been used  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_experiments(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str attribute_value: Regex pattern for filtering experiments by name
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[ExperimentGetListDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_germplasm_experiments_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_experiments_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def get_germplasm_experiments_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Get experiments where a germplasm has been used  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_experiments_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: germplasm URI (required)
        :param str authorization: Authentication token (required)
        :param str attribute_value: Regex pattern for filtering experiments by name
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[ExperimentGetListDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'attribute_value', 'order_by', 'page', 'page_size', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_experiments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if self.api_client.client_side_validation and ('uri' not in params or
                                                       params['uri'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uri` when calling `get_germplasm_experiments`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_germplasm_experiments`")  # noqa: E501

        if self.api_client.client_side_validation and ('page' in params and params['page'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_germplasm_experiments`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_germplasm_experiments`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'attribute_value' in params:
            query_params.append(('attribute_value', params['attribute_value']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/{uri}/experiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExperimentGetListDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasm_group(self, uri, authorization, **kwargs):  # noqa: E501
        """Get a germplasm group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_group(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm group URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: GermplasmGroupGetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_germplasm_group_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_group_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def get_germplasm_group_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Get a germplasm group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_group_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm group URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: GermplasmGroupGetDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if self.api_client.client_side_validation and ('uri' not in params or
                                                       params['uri'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uri` when calling `get_germplasm_group`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_germplasm_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm_group/{uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GermplasmGroupGetDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasm_group_by_uris(self, uris, authorization, **kwargs):  # noqa: E501
        """Get germplasm groups by their URIs  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_group_by_uris(uris, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] uris: Germplasm group URIs (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[GermplasmGroupGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_germplasm_group_by_uris_with_http_info(uris, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_group_by_uris_with_http_info(uris, authorization, **kwargs)  # noqa: E501
            return data

    def get_germplasm_group_by_uris_with_http_info(self, uris, authorization, **kwargs):  # noqa: E501
        """Get germplasm groups by their URIs  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_group_by_uris_with_http_info(uris, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] uris: Germplasm group URIs (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[GermplasmGroupGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uris', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_group_by_uris" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uris' is set
        if self.api_client.client_side_validation and ('uris' not in params or
                                                       params['uris'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uris` when calling `get_germplasm_group_by_uris`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_germplasm_group_by_uris`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uris' in params:
            query_params.append(('uris', params['uris']))  # noqa: E501
            collection_formats['uris'] = 'multi'  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm_group/by-uris', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GermplasmGroupGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasm_group_content(self, uri, authorization, **kwargs):  # noqa: E501
        """Get a germplasm group's germplasm, paginated  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_group_content(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm group URI (required)
        :param str authorization: Authentication token (required)
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[GermplasmGetAllDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_germplasm_group_content_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_group_content_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def get_germplasm_group_content_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Get a germplasm group's germplasm, paginated  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_group_content_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm group URI (required)
        :param str authorization: Authentication token (required)
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[GermplasmGetAllDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'order_by', 'page', 'page_size', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_group_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if self.api_client.client_side_validation and ('uri' not in params or
                                                       params['uri'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uri` when calling `get_germplasm_group_content`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_germplasm_group_content`")  # noqa: E501

        if self.api_client.client_side_validation and ('page' in params and params['page'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `get_germplasm_group_content`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `get_germplasm_group_content`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm_group/{uri}/germplasm', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GermplasmGetAllDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasm_group_with_germplasms(self, uri, authorization, **kwargs):  # noqa: E501
        """Get a germplasm group with nested germplasm details  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_group_with_germplasms(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm group URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: GermplasmGroupGetWithDetailsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_germplasm_group_with_germplasms_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasm_group_with_germplasms_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def get_germplasm_group_with_germplasms_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Get a germplasm group with nested germplasm details  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasm_group_with_germplasms_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Germplasm group URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: GermplasmGroupGetWithDetailsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasm_group_with_germplasms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if self.api_client.client_side_validation and ('uri' not in params or
                                                       params['uri'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `uri` when calling `get_germplasm_group_with_germplasms`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_germplasm_group_with_germplasms`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm_group/with-germplasm/{uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GermplasmGroupGetWithDetailsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_germplasms_by_uri(self, authorization, **kwargs):  # noqa: E501
        """Get a list of germplasms by their URIs  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasms_by_uri(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param list[str] body: Germplasms URIs
        :param str accept_language: Request accepted language
        :return: list[GermplasmGetAllDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_germplasms_by_uri_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_germplasms_by_uri_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def get_germplasms_by_uri_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Get a list of germplasms by their URIs  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_germplasms_by_uri_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param list[str] body: Germplasms URIs
        :param str accept_language: Request accepted language
        :return: list[GermplasmGetAllDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_germplasms_by_uri" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `get_germplasms_by_uri`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm/by_uris', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GermplasmGetAllDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_germplasm(self, authorization, **kwargs):  # noqa: E501
        """Search germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_germplasm(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str uri: Regex pattern for filtering list by uri
        :param str rdf_type: Search by type
        :param str name: Regex pattern for filtering list by name and synonyms
        :param str code: Regex pattern for filtering list by code
        :param int production_year: Search by production year
        :param str species: Search by species
        :param str variety: Search by variety
        :param str accession: Search by accession
        :param str group_of_germplasm: Group filter
        :param str institute: Search by institute
        :param str experiment: Search by experiment
        :param list[str] parent_germplasms: Search by parent varieties A or B
        :param list[str] parent_germplasms_m: Search by parent varieties A
        :param list[str] parent_germplasms_f: Search by parent varieties B
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[GermplasmGetAllDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_germplasm_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.search_germplasm_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def search_germplasm_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Search germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_germplasm_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str uri: Regex pattern for filtering list by uri
        :param str rdf_type: Search by type
        :param str name: Regex pattern for filtering list by name and synonyms
        :param str code: Regex pattern for filtering list by code
        :param int production_year: Search by production year
        :param str species: Search by species
        :param str variety: Search by variety
        :param str accession: Search by accession
        :param str group_of_germplasm: Group filter
        :param str institute: Search by institute
        :param str experiment: Search by experiment
        :param list[str] parent_germplasms: Search by parent varieties A or B
        :param list[str] parent_germplasms_m: Search by parent varieties A
        :param list[str] parent_germplasms_f: Search by parent varieties B
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[GermplasmGetAllDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'uri', 'rdf_type', 'name', 'code', 'production_year', 'species', 'variety', 'accession', 'group_of_germplasm', 'institute', 'experiment', 'parent_germplasms', 'parent_germplasms_m', 'parent_germplasms_f', 'metadata', 'order_by', 'page', 'page_size', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_germplasm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `search_germplasm`")  # noqa: E501

        if self.api_client.client_side_validation and ('page' in params and params['page'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `search_germplasm`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `search_germplasm`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uri' in params:
            query_params.append(('uri', params['uri']))  # noqa: E501
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'production_year' in params:
            query_params.append(('production_year', params['production_year']))  # noqa: E501
        if 'species' in params:
            query_params.append(('species', params['species']))  # noqa: E501
        if 'variety' in params:
            query_params.append(('variety', params['variety']))  # noqa: E501
        if 'accession' in params:
            query_params.append(('accession', params['accession']))  # noqa: E501
        if 'group_of_germplasm' in params:
            query_params.append(('group_of_germplasm', params['group_of_germplasm']))  # noqa: E501
        if 'institute' in params:
            query_params.append(('institute', params['institute']))  # noqa: E501
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
        if 'parent_germplasms' in params:
            query_params.append(('parent_germplasms', params['parent_germplasms']))  # noqa: E501
            collection_formats['parent_germplasms'] = 'multi'  # noqa: E501
        if 'parent_germplasms_m' in params:
            query_params.append(('parent_germplasms_m', params['parent_germplasms_m']))  # noqa: E501
            collection_formats['parent_germplasms_m'] = 'multi'  # noqa: E501
        if 'parent_germplasms_f' in params:
            query_params.append(('parent_germplasms_f', params['parent_germplasms_f']))  # noqa: E501
            collection_formats['parent_germplasms_f'] = 'multi'  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GermplasmGetAllDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_germplasm_groups(self, authorization, **kwargs):  # noqa: E501
        """Search germplasm groups  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_germplasm_groups(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str name: Regex pattern for filtering by name
        :param list[str] germplasm: Germplasm URIs
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[GermplasmGroupGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_germplasm_groups_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.search_germplasm_groups_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def search_germplasm_groups_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Search germplasm groups  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_germplasm_groups_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str name: Regex pattern for filtering by name
        :param list[str] germplasm: Germplasm URIs
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[GermplasmGroupGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'name', 'germplasm', 'order_by', 'page', 'page_size', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_germplasm_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `search_germplasm_groups`")  # noqa: E501

        if self.api_client.client_side_validation and ('page' in params and params['page'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `search_germplasm_groups`, must be a value greater than or equal to `0`")  # noqa: E501
        if self.api_client.client_side_validation and ('page_size' in params and params['page_size'] < 0):  # noqa: E501
            raise ValueError("Invalid value for parameter `page_size` when calling `search_germplasm_groups`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'germplasm' in params:
            query_params.append(('germplasm', params['germplasm']))  # noqa: E501
            collection_formats['germplasm'] = 'multi'  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm_group/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GermplasmGroupGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_germplasm(self, authorization, **kwargs):  # noqa: E501
        """Update a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_germplasm(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmUpdateDTO body: Germplasm description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_germplasm_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.update_germplasm_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def update_germplasm_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Update a germplasm  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_germplasm_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmUpdateDTO body: Germplasm description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_germplasm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `update_germplasm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_germplasm_group(self, authorization, **kwargs):  # noqa: E501
        """Update a germplasm group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_germplasm_group(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmGroupUpdateDTO body: Germplasm group description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_germplasm_group_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.update_germplasm_group_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def update_germplasm_group_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Update a germplasm group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_germplasm_group_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param GermplasmGroupUpdateDTO body: Germplasm group description
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_germplasm_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if self.api_client.client_side_validation and ('authorization' not in params or
                                                       params['authorization'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `authorization` when calling `update_germplasm_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/germplasm_group', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
