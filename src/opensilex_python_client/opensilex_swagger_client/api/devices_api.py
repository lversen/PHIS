# coding: utf-8

"""
    OpenSilex API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: BUILD-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from opensilex_swagger_client.api_client import ApiClient


class DevicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def count_device_data(self, uri, authorization, **kwargs):  # noqa: E501
        """Count device data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_device_data(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiment uris
        :param list[str] variable: Search by variables
        :param float min_confidence: Search by minimal confidence index
        :param float max_confidence: Search by maximal confidence index
        :param list[str] provenance: Search by provenance uri
        :param str metadata: Search by metadata
        :param list[str] operators: Search by operators
        :param str accept_language: Request accepted language
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.count_device_data_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.count_device_data_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def count_device_data_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Count device data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_device_data_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiment uris
        :param list[str] variable: Search by variables
        :param float min_confidence: Search by minimal confidence index
        :param float max_confidence: Search by maximal confidence index
        :param list[str] provenance: Search by provenance uri
        :param str metadata: Search by metadata
        :param list[str] operators: Search by operators
        :param str accept_language: Request accepted language
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'start_date', 'end_date', 'timezone', 'experiment', 'variable', 'min_confidence', 'max_confidence', 'provenance', 'metadata', 'operators', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_device_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `count_device_data`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `count_device_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
            collection_formats['experiment'] = 'multi'  # noqa: E501
        if 'variable' in params:
            query_params.append(('variable', params['variable']))  # noqa: E501
            collection_formats['variable'] = 'multi'  # noqa: E501
        if 'min_confidence' in params:
            query_params.append(('min_confidence', params['min_confidence']))  # noqa: E501
        if 'max_confidence' in params:
            query_params.append(('max_confidence', params['max_confidence']))  # noqa: E501
        if 'provenance' in params:
            query_params.append(('provenance', params['provenance']))  # noqa: E501
            collection_formats['provenance'] = 'multi'  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'operators' in params:
            query_params.append(('operators', params['operators']))  # noqa: E501
            collection_formats['operators'] = 'multi'  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/data/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_device(self, authorization, **kwargs):  # noqa: E501
        """Create a device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param DeviceCreationDTO body: Device description
        :param str accept_language: Request accepted language
        :param bool check_only: Checking only
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_device_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.create_device_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def create_device_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Create a device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_device_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param DeviceCreationDTO body: Device description
        :param str accept_language: Request accepted language
        :param bool check_only: Checking only
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body', 'accept_language', 'check_only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'check_only' in params:
            query_params.append(('checkOnly', params['check_only']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_device(self, uri, authorization, **kwargs):  # noqa: E501
        """Delete a device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_device(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_device_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_device_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def delete_device_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Delete a device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_device_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `delete_device`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_devices(self, authorization, **kwargs):  # noqa: E501
        """export devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_devices(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str rdf_type: RDF type filter
        :param bool include_subtypes: Set this param to true when filtering on rdf_type to also retrieve sub-types
        :param str name: Regex pattern for filtering by name
        :param int year: Search by year
        :param date existence_date: Date to filter device existence
        :param str brand: Regex pattern for filtering by brand
        :param str model: Regex pattern for filtering by model
        :param str serial_number: Regex pattern for filtering by serial number
        :param str metadata: Search by metadata
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_devices_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.export_devices_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def export_devices_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """export devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_devices_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str rdf_type: RDF type filter
        :param bool include_subtypes: Set this param to true when filtering on rdf_type to also retrieve sub-types
        :param str name: Regex pattern for filtering by name
        :param int year: Search by year
        :param date existence_date: Date to filter device existence
        :param str brand: Regex pattern for filtering by brand
        :param str model: Regex pattern for filtering by model
        :param str serial_number: Regex pattern for filtering by serial number
        :param str metadata: Search by metadata
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'rdf_type', 'include_subtypes', 'name', 'year', 'existence_date', 'brand', 'model', 'serial_number', 'metadata', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `export_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'include_subtypes' in params:
            query_params.append(('include_subtypes', params['include_subtypes']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'existence_date' in params:
            query_params.append(('existence_date', params['existence_date']))  # noqa: E501
        if 'brand' in params:
            query_params.append(('brand', params['brand']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serial_number', params['serial_number']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_geospatial1(self, authorization, **kwargs):  # noqa: E501
        """Export a given list of devices URIs to shapefile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_geospatial1(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param list[GeometryDTO] body: Devices
        :param str accept_language: Request accepted language
        :param list[str] selected_props: properties selected
        :param str format: export format (shp/geojson)
        :param int page_size: Page size limited to 10,000 objects
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_geospatial1_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.export_geospatial1_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def export_geospatial1_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Export a given list of devices URIs to shapefile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_geospatial1_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param list[GeometryDTO] body: Devices
        :param str accept_language: Request accepted language
        :param list[str] selected_props: properties selected
        :param str format: export format (shp/geojson)
        :param int page_size: Page size limited to 10,000 objects
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body', 'accept_language', 'selected_props', 'format', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_geospatial1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `export_geospatial1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'selected_props' in params:
            query_params.append(('selected_props', params['selected_props']))  # noqa: E501
            collection_formats['selected_props'] = 'multi'  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/export_geospatial', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_list(self, authorization, **kwargs):  # noqa: E501
        """export devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_list(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param URIsListPostDTO body: List of device URI
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_list_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.export_list_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def export_list_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """export devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_list_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param URIsListPostDTO body: List of device URI
        :param str accept_language: Request accepted language
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'body', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `export_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/export_by_uris', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device(self, uri, authorization, **kwargs):  # noqa: E501
        """Get device detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: DeviceGetDetailsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def get_device_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Get device detail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: DeviceGetDetailsDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_device`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceGetDetailsDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_by_uris(self, uris, authorization, **kwargs):  # noqa: E501
        """Get devices by uris  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_by_uris(uris, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] uris: Device URIs (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[DeviceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_by_uris_with_http_info(uris, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_by_uris_with_http_info(uris, authorization, **kwargs)  # noqa: E501
            return data

    def get_device_by_uris_with_http_info(self, uris, authorization, **kwargs):  # noqa: E501
        """Get devices by uris  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_by_uris_with_http_info(uris, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] uris: Device URIs (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[DeviceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uris', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_by_uris" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uris' is set
        if ('uris' not in params or
                params['uris'] is None):
            raise ValueError("Missing the required parameter `uris` when calling `get_device_by_uris`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_device_by_uris`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uris' in params:
            query_params.append(('uris', params['uris']))  # noqa: E501
            collection_formats['uris'] = 'multi'  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/by_uris', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_data_files_provenances(self, uri, authorization, **kwargs):  # noqa: E501
        """Get provenances of datafiles linked to this device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_data_files_provenances(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_data_files_provenances_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_data_files_provenances_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def get_device_data_files_provenances_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Get provenances of datafiles linked to this device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_data_files_provenances_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_data_files_provenances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_device_data_files_provenances`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_device_data_files_provenances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/datafiles/provenances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProvenanceGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_data_provenances(self, uri, authorization, **kwargs):  # noqa: E501
        """Get provenances of data that have been measured on this device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_data_provenances(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_data_provenances_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_data_provenances_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def get_device_data_provenances_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Get provenances of data that have been measured on this device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_data_provenances_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[ProvenanceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_data_provenances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_device_data_provenances`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_device_data_provenances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/data/provenances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProvenanceGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_device_variables(self, uri, authorization, **kwargs):  # noqa: E501
        """Get variables linked to the device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_variables(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[NamedResourceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_variables_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_device_variables_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def get_device_variables_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Get variables linked to the device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_variables_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[NamedResourceDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_variables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_device_variables`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_device_variables`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/variables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NamedResourceDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_devices_by_facility(self, uri, authorization, **kwargs):  # noqa: E501
        """Get devices by facility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_devices_by_facility(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: target URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[DeviceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_devices_by_facility_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_devices_by_facility_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def get_devices_by_facility_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Get devices by facility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_devices_by_facility_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: target URI (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: list[DeviceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_devices_by_facility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `get_devices_by_facility`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_devices_by_facility`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/facility', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_csv(self, description, file, authorization, **kwargs):  # noqa: E501
        """Import a CSV file with one device per line  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_csv(description, file, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Ref description: (required)
        :param str file: (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_csv_with_http_info(description, file, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.import_csv_with_http_info(description, file, authorization, **kwargs)  # noqa: E501
            return data

    def import_csv_with_http_info(self, description, file, authorization, **kwargs):  # noqa: E501
        """Import a CSV file with one device per line  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_csv_with_http_info(description, file, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Ref description: (required)
        :param str file: (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['description', 'file', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_csv" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `import_csv`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `import_csv`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `import_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSVValidationDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_device_data(self, uri, authorization, **kwargs):  # noqa: E501
        """Search device data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_device_data(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiment uris
        :param list[str] variable: Search by variables
        :param float min_confidence: Search by minimal confidence index
        :param float max_confidence: Search by maximal confidence index
        :param list[str] provenance: Search by provenance uri
        :param str metadata: Search by metadata
        :param list[str] operators: Search by operators
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DataGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_device_data_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.search_device_data_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def search_device_data_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Search device data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_device_data_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiment uris
        :param list[str] variable: Search by variables
        :param float min_confidence: Search by minimal confidence index
        :param float max_confidence: Search by maximal confidence index
        :param list[str] provenance: Search by provenance uri
        :param str metadata: Search by metadata
        :param list[str] operators: Search by operators
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DataGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'start_date', 'end_date', 'timezone', 'experiment', 'variable', 'min_confidence', 'max_confidence', 'provenance', 'metadata', 'operators', 'order_by', 'page', 'page_size', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_device_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `search_device_data`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `search_device_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
            collection_formats['experiment'] = 'multi'  # noqa: E501
        if 'variable' in params:
            query_params.append(('variable', params['variable']))  # noqa: E501
            collection_formats['variable'] = 'multi'  # noqa: E501
        if 'min_confidence' in params:
            query_params.append(('min_confidence', params['min_confidence']))  # noqa: E501
        if 'max_confidence' in params:
            query_params.append(('max_confidence', params['max_confidence']))  # noqa: E501
        if 'provenance' in params:
            query_params.append(('provenance', params['provenance']))  # noqa: E501
            collection_formats['provenance'] = 'multi'  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'operators' in params:
            query_params.append(('operators', params['operators']))  # noqa: E501
            collection_formats['operators'] = 'multi'  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_device_datafiles(self, uri, authorization, **kwargs):  # noqa: E501
        """Search device datafiles descriptions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_device_datafiles(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str rdf_type: Search by rdf type uri
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiments
        :param list[str] scientific_objects: Search by object uris list
        :param list[str] provenances: Search by provenance uris list
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DataGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_device_datafiles_with_http_info(uri, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.search_device_datafiles_with_http_info(uri, authorization, **kwargs)  # noqa: E501
            return data

    def search_device_datafiles_with_http_info(self, uri, authorization, **kwargs):  # noqa: E501
        """Search device datafiles descriptions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_device_datafiles_with_http_info(uri, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uri: Device URI (required)
        :param str authorization: Authentication token (required)
        :param str rdf_type: Search by rdf type uri
        :param str start_date: Search by minimal date
        :param str end_date: Search by maximal date
        :param str timezone: Precise the timezone corresponding to the given dates
        :param list[str] experiment: Search by experiments
        :param list[str] scientific_objects: Search by object uris list
        :param list[str] provenances: Search by provenance uris list
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DataGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uri', 'authorization', 'rdf_type', 'start_date', 'end_date', 'timezone', 'experiment', 'scientific_objects', 'provenances', 'metadata', 'order_by', 'page', 'page_size', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_device_datafiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uri' is set
        if ('uri' not in params or
                params['uri'] is None):
            raise ValueError("Missing the required parameter `uri` when calling `search_device_datafiles`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `search_device_datafiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uri' in params:
            path_params['uri'] = params['uri']  # noqa: E501

        query_params = []
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))  # noqa: E501
        if 'experiment' in params:
            query_params.append(('experiment', params['experiment']))  # noqa: E501
            collection_formats['experiment'] = 'multi'  # noqa: E501
        if 'scientific_objects' in params:
            query_params.append(('scientific_objects', params['scientific_objects']))  # noqa: E501
            collection_formats['scientific_objects'] = 'multi'  # noqa: E501
        if 'provenances' in params:
            query_params.append(('provenances', params['provenances']))  # noqa: E501
            collection_formats['provenances'] = 'multi'  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/{uri}/datafiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DataGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_devices(self, authorization, **kwargs):  # noqa: E501
        """Search devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_devices(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str rdf_type: RDF type filter
        :param bool include_subtypes: Set this param to true when filtering on rdf_type to also retrieve sub-types
        :param str name: Regex pattern for filtering by name
        :param str variable: Variable
        :param int year: Search by year
        :param date existence_date: Date to filter device existence
        :param str facility: Search by facility
        :param str brand: Regex pattern for filtering by brand
        :param str model: Regex pattern for filtering by model
        :param str serial_number: Regex pattern for filtering by serial number
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DeviceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_devices_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.search_devices_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def search_devices_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """Search devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_devices_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: Authentication token (required)
        :param str rdf_type: RDF type filter
        :param bool include_subtypes: Set this param to true when filtering on rdf_type to also retrieve sub-types
        :param str name: Regex pattern for filtering by name
        :param str variable: Variable
        :param int year: Search by year
        :param date existence_date: Date to filter device existence
        :param str facility: Search by facility
        :param str brand: Regex pattern for filtering by brand
        :param str model: Regex pattern for filtering by model
        :param str serial_number: Regex pattern for filtering by serial number
        :param str metadata: Search by metadata
        :param list[str] order_by: List of fields to sort as an array of fieldName=asc|desc
        :param int page: Page number
        :param int page_size: Page size
        :param str accept_language: Request accepted language
        :return: list[DeviceGetDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'rdf_type', 'include_subtypes', 'name', 'variable', 'year', 'existence_date', 'facility', 'brand', 'model', 'serial_number', 'metadata', 'order_by', 'page', 'page_size', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `search_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rdf_type' in params:
            query_params.append(('rdf_type', params['rdf_type']))  # noqa: E501
        if 'include_subtypes' in params:
            query_params.append(('include_subtypes', params['include_subtypes']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'variable' in params:
            query_params.append(('variable', params['variable']))  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'existence_date' in params:
            query_params.append(('existence_date', params['existence_date']))  # noqa: E501
        if 'facility' in params:
            query_params.append(('facility', params['facility']))  # noqa: E501
        if 'brand' in params:
            query_params.append(('brand', params['brand']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'serial_number' in params:
            query_params.append(('serial_number', params['serial_number']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceGetDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_device(self, body, authorization, **kwargs):  # noqa: E501
        """Update a device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_device(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceCreationDTO body: Device description (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_device_with_http_info(body, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.update_device_with_http_info(body, authorization, **kwargs)  # noqa: E501
            return data

    def update_device_with_http_info(self, body, authorization, **kwargs):  # noqa: E501
        """Update a device  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_device_with_http_info(body, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeviceCreationDTO body: Device description (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_device`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_csv1(self, description, file, authorization, **kwargs):  # noqa: E501
        """Validate the import of a CSV file with one device per line  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_csv1(description, file, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Ref description: (required)
        :param str file: (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_csv1_with_http_info(description, file, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_csv1_with_http_info(description, file, authorization, **kwargs)  # noqa: E501
            return data

    def validate_csv1_with_http_info(self, description, file, authorization, **kwargs):  # noqa: E501
        """Validate the import of a CSV file with one device per line  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_csv1_with_http_info(description, file, authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Ref description: (required)
        :param str file: (required)
        :param str authorization: Authentication token (required)
        :param str accept_language: Request accepted language
        :return: CSVValidationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['description', 'file', 'authorization', 'accept_language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_csv1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `validate_csv1`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `validate_csv1`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `validate_csv1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'accept_language' in params:
            header_params['Accept-Language'] = params['accept_language']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/core/devices/import_validation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSVValidationDTO',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
